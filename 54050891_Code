package Web;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 * Teerawut Banchuen 54050891
 * Inspiration From : http://www.java-tips.org/java-se-tips/javax.swing/how-to-create-a-simple-browser-in-swing-18.html
 */

/**
 *
 * @author jengDizort
 */
import java.awt.Cursor;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javafx.scene.web.WebView;
import javax.swing.JOptionPane;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLFrameHyperlinkEvent;

public class Webbrowser extends javax.swing.JFrame implements HyperlinkListener{

    /**
     * Creates new form Webbrowser
     */
    private ArrayList<String> pageList = new ArrayList<String>();
    
    public Webbrowser() {
        initComponents();
        //backButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        DisplayPane = new javax.swing.JEditorPane();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        DisplayPane1 = new javax.swing.JEditorPane();
        jTextField3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("s4050891@kmitl.ac.th - Java Web Browser (Network Programming Class Assignment)");

        //DisplayPane.setContentType("text/html");
        DisplayPane.setEditable(false);
        DisplayPane.addHyperlinkListener(this);
        jScrollPane1.setViewportView(DisplayPane);

        jLabel1.setText("URL 1 :");

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Go");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        //DisplayPane.setContentType("text/html");
        DisplayPane1.setEditable(false);
        DisplayPane1.addHyperlinkListener(this);
        jScrollPane2.setViewportView(DisplayPane1);

        jLabel2.setText("URL 2 :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3))))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        URL verifiedUrl1 = verifyUrl(jTextField2.getText());
        URL verifiedUrl2 = verifyUrl(jTextField3.getText());
        if (verifiedUrl1 != null && verifiedUrl2 != null) {
            new Thread(new T(this,verifiedUrl1,"A")).start();
            new Thread(new T(this,verifiedUrl2,"B")).start();
        } else {
            showError("Invalid URL");
        }
    }                                        

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Webbrowser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Webbrowser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Webbrowser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Webbrowser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Webbrowser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JEditorPane DisplayPane;
    private javax.swing.JEditorPane DisplayPane1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration                   

    private void showError(String errorMessage) {
        JOptionPane.showMessageDialog(this, errorMessage,
                "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    // Verify URL format.
    private URL verifyUrl(String url) {
        // Only allow HTTP URLs.
        if (!url.toLowerCase().startsWith("http://"))
            return null;
        
        // Verify format of URL.
        URL verifiedUrl = null;
        try {
            verifiedUrl = new URL(url);
        } catch (Exception e) {
            return null;
        }
        
        return verifiedUrl;
    }
    
    private void updateButtons() {
        System.out.println(pageList.size());
        System.out.println(pageList);
        if (pageList.size() < 2) {
            System.out.println("Must be less 1 : "+pageList.size());
            //backButton.setEnabled(false);
        } else {
            //backButton.setEnabled(true);
        }
    }
    
    public synchronized void printHeader(Map<String, List<String>> map,String tName){
            jTextArea1.append("===================================\n");
            jTextArea1.append("Thread "+tName+" 's HTTP Header :\n");
            jTextArea1.append("--------------------------------------------\n");
            for (Map.Entry<String, List<String>> entry : map.entrySet()) {
		jTextArea1.append(entry.getKey()+" : "+entry.getValue()+"\n");
            }
            jTextArea1.append("===================================\n");
        }
    
    private static class T implements Runnable{

        private Webbrowser a;
        private String tName;
        private URL pageUrl;
        
        public T(Webbrowser a,URL pageUrl,String tName) {
		this.a = a;
                this.pageUrl = pageUrl;
                this.tName = tName;
                a.jTextArea1.append("Thread "+this.tName+" has been Start.\n");
	}
        
        @Override
        public void run() {
            try {
                a.jTextArea1.append("Thread "+tName+"'s getting page URL = "+pageUrl.toString()+"\n");
                // Get URL of page currently being displayed.
                
            
                // Load and display specified page.
               
            
                // Get URL of new page being displayed.
                // Update location text field with URL of current page.
                if(tName.compareTo("A")==0){
                    URL currentUrl = a.DisplayPane.getPage();
                    a.DisplayPane.setPage(pageUrl);
                    URL newUrl = a.DisplayPane.getPage();
                    a.jTextField2.setText(pageUrl.toString());
                    URLConnection conn = newUrl.openConnection();
                    Map<String, List<String>> map = conn.getHeaderFields();
                    a.printHeader(map,tName);
                    
                }
                else if (tName.compareTo("B")==0){
                    URL currentUrl = a.DisplayPane1.getPage();
                    a.DisplayPane1.setPage(pageUrl);
                    URL newUrl = a.DisplayPane1.getPage();
                    a.jTextField3.setText(pageUrl.toString());
                    URLConnection conn = newUrl.openConnection();
                    Map<String, List<String>> map = conn.getHeaderFields();
                    a.printHeader(map,tName);
                }
            
            // Update buttons based on the page being displayed.
            } catch (Exception e) {
            // Show error messsage.
            a.showError("Unable to load page");
            } finally {
            // Return to default cursor.
            a.setCursor(Cursor.getDefaultCursor());
            }
            a.jTextArea1.append("Thread "+tName+" has been Stop.\n");
        }
    }
    
    @Override
    public void hyperlinkUpdate(HyperlinkEvent event) {
        HyperlinkEvent.EventType eventType = event.getEventType();
        if (eventType == HyperlinkEvent.EventType.ACTIVATED) {
            if (event instanceof HTMLFrameHyperlinkEvent) {
                HTMLFrameHyperlinkEvent linkEvent = (HTMLFrameHyperlinkEvent) event;
                HTMLDocument document = (HTMLDocument) DisplayPane.getDocument();
                document.processHTMLFrameHyperlinkEvent(linkEvent);
            } else {
                //showPage(event.getURL(), true);
            }
        }
    }
}
